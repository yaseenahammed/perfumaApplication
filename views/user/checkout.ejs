<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Perfuma</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out forwards',
                        'slide-up': 'slideUp 0.6s ease-out forwards',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' },
                        },
                        slideUp: {
                            '0%': { transform: 'translateY(30px)', opacity: '0' },
                            '100%': { transform: 'translateY(0)', opacity: '1' },
                        }
                    }
                }
            }
        }
    </script>

    <style>
        .address-card, .coupon-card {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .address-card:hover, .coupon-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .address-card.selected, .coupon-card.selected {
            border-color: #f59e0b;
            box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.5);
        }
    </style>
</head>

<body class="bg-gray-50">
    <%- include("../../views/partials/user/header") %>

    <section class="relative py-16 bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900">
        <div class="relative z-10 container mx-auto px-4 text-center text-white">
            <h1 class="text-4xl lg:text-5xl font-bold mb-4">Checkout</h1>
            <nav class="flex items-center justify-center space-x-2 text-lg">
                <a href="/" class="text-gray-300 hover:text-white transition duration-200">Home</a>
                <i class="fas fa-chevron-right text-gray-400 text-sm"></i>
                <a href="/cart" class="text-gray-300 hover:text-white transition duration-200">Cart</a>
                <i class="fas fa-chevron-right text-gray-400 text-sm"></i>
                <span class="text-amber-400">Checkout</span>
            </nav>
        </div>
    </section>

    <main class="py-16">
        <div class="container mx-auto px-4">
            <div class="max-w-7xl mx-auto">
                <div class="grid lg:grid-cols-3 gap-8">
                    <div class="lg:col-span-2">
                        <div class="bg-white rounded-2xl shadow-xl p-8 animate-fade-in mb-8">
                            <h2 class="text-2xl lg:text-3xl font-bold text-gray-900 mb-6 flex items-center">
                                <i class="fas fa-map-marker-alt text-amber-500 mr-3"></i>
                                Shipping Address
                            </h2>
                            <% if (hasAddresses) { %>
                                <div class="space-y-4">
                                    <% userAddresses.forEach(function(address) { %>
                                        <div class="address-card border-2 border-gray-200 rounded-xl p-6 relative flex justify-between items-start <%= selectedAddressId === address._id.toString() ? 'selected' : '' %>"
                                            data-id="<%= address._id %>"
                                            data-street="<%= address.street %>"
                                            data-country="<%= address.country %>"
                                            data-city="<%= address.city %>"
                                            data-state="<%= address.state %>"
                                            data-zip="<%= address.zip %>"
                                            data-phone="<%= address.phone %>">
                                            <div>
                                                <h3 class="text-lg font-semibold text-gray-800"><%= user.name %></h3>
                                                <p class="text-gray-600"><%= address.street %>, <%= address.country %></p>
                                                <p class="text-gray-600"><%= address.city %>, <%= address.state %> - <%= address.zip %></p>
                                                <p class="text-gray-600">Phone: <%= address.phone %></p>
                                            </div>
                                            <div class="flex space-x-2 mt-2 md:mt-0">
                                                <button class="edit-address-btn text-blue-500 hover:text-blue-700 font-medium text-sm"
                                                    data-id="<%= address._id %>"
                                                    data-street="<%= address.street %>"
                                                    data-country="<%= address.country %>"
                                                    data-city="<%= address.city %>"
                                                    data-state="<%= address.state %>"
                                                    data-zip="<%= address.zip %>"
                                                    data-phone="<%= address.phone %>">
                                                    <i class="fas fa-edit mr-1"></i> Edit
                                                </button>
                                            </div>
                                            <div class="absolute top-3 right-3 text-amber-500 <%= selectedAddressId === address._id.toString() ? '' : 'hidden' %>">
                                                <i class="fas fa-check-circle text-xl"></i>
                                            </div>
                                        </div>
                                    <% }) %>
                                </div>
                                <% if (!selectedAddress) { %>
                                    <p class="text-red-600 mt-4">Please select a shipping address.</p>
                                <% } %>
                            <% } else { %>
                                <p class="text-gray-600">No addresses available. Please add an address.</p>
                            <% } %>
                            <button class="add-new-address-btn mt-6 w-full flex items-center justify-center px-6 py-3 border border-dashed border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition duration-200">
                                <i class="fas fa-plus mr-2"></i> Add New Address
                            </button>
                        </div>

                        <div class="bg-white rounded-2xl shadow-xl p-8 animate-fade-in mb-8">
                            <h2 class="text-2xl lg:text-3xl font-bold text-gray-900 mb-6 flex items-center">
                                <i class="fas fa-box-open text-amber-500 mr-3"></i>
                                Items in Your Order
                            </h2>
                            <div class="space-y-6">
                                <% cartItems.forEach(item => { %>
                                    <div class="flex items-center gap-4 border-b border-gray-100 pb-4">
                                        <% if (item.product.productImages && item.product.productImages.length > 0) { %>
                                            <img src="<%= item.product.productImages[0] %>" alt="<%= item.product.name %>" class="w-20 h-20 object-cover rounded-lg shadow-sm">
                                        <% } else { %>
                                            <img src="/images/default-product.png" alt="No Image" class="w-20 h-20 object-cover rounded-lg shadow-sm">
                                        <% } %>
                                        <div class="flex-1">
                                            <h3 class="text-lg font-semibold text-gray-900"><%= item.product.name %></h3>
                                            <p class="text-gray-600 text-sm">Quantity: <%= item.quantity %></p>
                                            <p class="text-gray-600 text-sm">Price: ₹<%= item.product.salePrice %></p>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-gray-800 font-medium">Item Total: ₹<%= item.product.salePrice * item.quantity %></p>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                        </div>

                        <div class="bg-white rounded-2xl shadow-xl p-8 animate-fade-in">
                            <h2 class="text-2xl lg:text-3xl font-bold text-gray-900 mb-6 flex items-center">
                                <i class="fas fa-ticket-alt text-amber-500 mr-3"></i>
                                Available Coupons
                            </h2>
                            <% if (eligibleCoupons && eligibleCoupons.length > 0) { %>
                                <div class="space-y-4">
                                    <% eligibleCoupons.forEach(coupon => { %>
                                        <div class="coupon-card border-2 border-gray-200 rounded-xl p-6 relative flex justify-between items-start <%= appliedCouponCode === coupon.couponCode ? 'selected' : '' %>"
                                            data-coupon-code="<%= coupon.couponCode %>"
                                            data-discount-price="<%= coupon.discountPrice %>">
                                            <div>
                                                <h3 class="text-lg font-semibold text-gray-800"><%= coupon.couponCode %></h3>
                                                <p class="text-gray-600">Discount: ₹<%= coupon.discountPrice %></p>
                                                <p class="text-gray-600">Min Order: ₹<%= coupon.minPrice %></p>
                                                <p class="text-gray-600">Expires: <%= new Date(coupon.expireOn).toLocaleDateString() %></p>
                                            </div>
                                            <div class="flex space-x-2 mt-2 md:mt-0">
                                                <button class="apply-coupon-btn text-amber-500 hover:text-amber-700 font-medium text-sm"
                                                    data-coupon-code="<%= coupon.couponCode %>"
                                                    data-discount-price="<%= coupon.discountPrice %>">
                                                    <i class="fas fa-check mr-1"></i> Apply
                                                </button>
                                            </div>
                                            <div class="absolute top-3 right-3 text-amber-500 <%= appliedCouponCode === coupon.couponCode ? '' : 'hidden' %>">
                                                <i class="fas fa-check-circle text-xl"></i>
                                            </div>
                                        </div>
                                    <% }) %>
                                </div>
                            <% } else { %>
                                <p class="text-gray-600">No eligible coupons available.</p>
                            <% } %>
                        </div>
                    </div>

                    <div class="lg:col-span-1">
                        <div class="bg-white rounded-2xl shadow-xl p-8 sticky top-32 animate-slide-up">
                            <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                                <i class="fas fa-file-invoice-dollar text-amber-500 mr-3"></i>
                                Payment Summary
                            </h2>

                            <div class="space-y-4 mb-6">
                                <div class="flex justify-between items-center py-2">
                                    <span class="text-gray-600">Subtotal:</span>
                                    <span class="font-semibold text-gray-900"><span id="subtotal" data-value="<%= subtotal %>">₹<%= subtotal.toFixed(2) %></span></span>
                                </div>
                                <div class="flex justify-between items-center py-2">
                                    <span class="text-gray-600">Shipping:</span>
                                    <span class="font-semibold text-gray-900" id="shipping" data-value="<%= shipping %>">₹<%= shipping %></span>
                                </div>
                                <div class="flex justify-between items-center py-2" id="coupon-discount" style="display: <%= appliedCouponCode ? 'flex' : 'none' %>;">
                                    <span class="text-gray-600">Coupon Discount:</span>
                                    <span class="font-semibold text-green-600">-₹<span id="coupon-discount-amount"><%= appliedDiscountPrice || 0 %></span></span>
                                </div>
                                <div class="border-t border-gray-200 pt-4">
                                    <div class="flex justify-between items-center">
                                        <span class="text-xl font-bold text-gray-900">Order Total:</span>
                                        <span class="text-2xl font-bold text-amber-600">₹<span id="order-total"><%= total.toFixed(2) %></span></span>
                                    </div>
                                </div>
                            </div>

                            <h3 class="text-xl font-bold text-gray-900 mb-4 flex items-center">
                                <i class="fas fa-wallet text-amber-500 mr-2"></i>
                                Payment Method
                            </h3>
                            <div class="space-y-3 mb-6">
                                <label class="flex items-center p-4 border border-gray-200 rounded-lg shadow-sm cursor-pointer hover:bg-gray-50 transition-colors">
                                    <input type="radio" name="payment_method" value="card" class="form-radio text-amber-500 h-5 w-5">
                                    <span class="ml-3 text-lg font-medium text-gray-800">Card Payment</span>
                                    <i class="fas fa-credit-card ml-auto text-blue-600 text-2xl"></i>
                                </label>
                                <label class="flex items-center p-4 border border-gray-200 rounded-lg shadow-sm cursor-pointer hover:bg-gray-50 transition-colors">
                                    <input type="radio" name="payment_method" value="upi" class="form-radio text-amber-500 h-5 w-5">
                                    <span class="ml-3 text-lg font-medium text-gray-800">UPI Payment</span>
                                    <i class="fab fa-google-pay ml-auto text-orange-600 text-2xl"></i>
                                </label>
                                <label class="flex items-center p-4 border border-gray-200 rounded-lg shadow-sm cursor-pointer hover:bg-gray-50 transition-colors">
                                    <input type="radio" name="payment_method" value="netbanking" class="form-radio text-amber-500 h-5 w-5">
                                    <span class="ml-3 text-lg font-medium text-gray-800">Net Banking</span>
                                    <i class="fas fa-university ml-auto text-green-600 text-2xl"></i>
                                </label>
                                <label class="flex items-center p-4 border border-gray-200 rounded-lg shadow-sm cursor-pointer hover:bg-gray-50 transition-colors">
                                    <input type="radio" name="payment_method" value="cod" class="form-radio text-amber-500 h-5 w-5" checked>
                                    <span class="ml-3 text-lg font-medium text-gray-800">Cash on Delivery</span>
                                    <i class="fas fa-money-bill-wave ml-auto text-green-600 text-2xl"></i>
                                </label>
                            </div>

                            <div class="mb-6">
                                <h3 class="text-xl font-bold text-gray-900 mb-4 flex items-center">
                                    <i class="fas fa-ticket-alt text-amber-500 mr-2"></i>
                                    Apply Coupon
                                </h3>
                                <div class="flex items-center gap-2">
                                    <input type="text" id="coupon-code-input" name="couponCode" value="<%= appliedCouponCode || '' %>" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" placeholder="Enter coupon code" />
                                    <button id="apply-coupon-btn" class="px-4 py-2 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition duration-300">Apply</button>
                                </div>
                                <p id="coupon-message" class="text-sm text-gray-600 mt-2 hidden"></p>
                            </div>

                            <button class="place-order-btn w-full bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 disabled:from-gray-400 disabled:to-gray-500 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 disabled:hover:scale-100 disabled:cursor-not-allowed flex items-center justify-center">
                                <i class="fas fa-truck-loading mr-2"></i>
                                Place Order
                            </button><br>


                             <button id="wallet-btn" class="wallet-balance-btn w-full bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 disabled:from-gray-400 disabled:to-gray-500 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 disabled:hover:scale-100 disabled:cursor-not-allowed flex items-center justify-center">
                                <i class="fas fa-truck-loading mr-2"></i>
                               Use Wallet Balance
                            </button>

                            <div class="mt-6 bg-green-50 border border-green-200 rounded-lg p-4">
                                <div class="flex items-center text-green-700">
                                    <i class="fas fa-shield-alt mr-2"></i>
                                    <span class="text-sm font-medium">Secure and Reliable</span>
                                </div>
                                <p class="text-xs text-green-600 mt-1">Your order will be processed securely</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <div id="add-address-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 hidden animate-fade-in">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full relative animate-slide-up transform scale-95 opacity-0" id="add-address-content">
            <button class="close-modal-btn absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-2xl">
                <i class="fas fa-times-circle"></i>
            </button>
            <h2 class="text-3xl font-bold text-gray-900 mb-6 text-center">Add New Address</h2>
            <form id="add-address-form" class="space-y-4">
                <div>
                    <label for="add-street" class="block text-sm font-medium text-gray-700 mb-1">Street Address</label>
                    <input type="text" id="add-street" name="street" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                </div>
                <div>
                    <label for="add-country" class="block text-sm font-medium text-gray-700 mb-1">Locality</label>
                    <input type="text" id="add-country" name="country" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="add-city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <input type="text" id="add-city" name="city" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                    </div>
                    <div>
                        <label for="add-state" class="block text-sm font-medium text-gray-700 mb-1">State</label>
                        <input type="text" id="add-state" name="state" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                    </div>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="add-pincode" class="block text-sm font-medium text-gray-700 mb-1">Pincode</label>
                        <input type="text" id="add-pincode" name="zip" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required pattern="[0-9]{6}" title="Pincode must be 6 digits">
                    </div>
                    <div>
                        <label for="add-phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                        <input type="text" id="add-phone" name="phone" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required pattern="[0-9]{10}" title="Phone number must be 10 digits">
                    </div>
                </div>
                <button type="submit" class="w-full bg-amber-500 text-white py-3 rounded-lg font-semibold hover:bg-amber-600 transition duration-300">Save Address</button>
            </form>
        </div>
    </div>

    <div id="edit-address-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 hidden animate-fade-in">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full relative animate-slide-up transform scale-95 opacity-0" id="edit-address-content">
            <button class="close-modal-btn absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-2xl">
                <i class="fas fa-times-circle"></i>
            </button>
            <h2 class="text-3xl font-bold text-gray-900 mb-6 text-center">Edit Address</h2>
            <form id="edit-address-form" class="space-y-4">
                <input type="hidden" id="edit-address-id" name="addressId">
                <div>
                    <label for="edit-street" class="block text-sm font-medium text-gray-700 mb-1">Street Address</label>
                    <input type="text" id="edit-street" name="street" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                </div>
                <div>
                    <label for="edit-country" class="block text-sm font-medium text-gray-700 mb-1">Locality</label>
                    <input type="text" id="edit-country" name="country" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="edit-city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
                        <input type="text" id="edit-city" name="city" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                    </div>
                    <div>
                        <label for="edit-state" class="block text-sm font-medium text-gray-700 mb-1">State</label>
                        <input type="text" id="edit-state" name="state" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required>
                    </div>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="edit-pincode" class="block text-sm font-medium text-gray-700 mb-1">Pincode</label>
                        <input type="text" id="edit-pincode" name="zip" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required pattern="[0-9]{6}" title="Pincode must be 6 digits">
                    </div>
                    <div>
                        <label for="edit-phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                        <input type="text" id="edit-phone" name="phone" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" required pattern="[0-9]{10}" title="Phone number must be 10 digits">
                    </div>
                </div>
                <button type="submit" class="w-full bg-amber-500 text-white py-3 rounded-lg font-semibold hover:bg-amber-600 transition duration-300">Update Address</button>
            </form>
        </div>
    </div>

    <div id="order-confirm-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md text-center">
            <div class="text-5xl text-gray-400 mb-4">❔</div>
            <h2 class="text-2xl font-bold mb-4">Confirm Your Order</h2>
            <div class="text-left mb-6 space-y-2">
                <p><strong>Payment Method:</strong> <span id="confirm-payment-method"></span></p>
                <p><strong>Applied Coupon:</strong> <span id="confirm-coupon-code">None</span></p>
                <p><strong>Order Total:</strong> ₹<span id="confirm-order-total"><%= total.toFixed(2) %></span></p>
            </div>
            <div class="flex justify-center gap-4">
                <button id="confirm-place-order-btn" class="bg-amber-500 hover:bg-amber-600 text-white font-bold py-2 px-6 rounded-lg">Place Order</button>
                <button id="cancel-confirmation-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-6 rounded-lg">Review Again</button>
            </div>
        </div>
    </div>

    <div id="order-successful-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 hidden animate-fade-in">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full text-center animate-slide-up transform scale-95 opacity-0" id="order-successful-content">
            <div class="w-32 h-32 mx-auto mb-6">
                <img src="https://cdn-icons-png.flaticon.com/512/845/845646.png" alt="Success Tick" class="w-20 h-20 mx-auto mb-6">
            </div>
            <h2 class="text-3xl font-bold text-green-600 mb-4">Order Placed Successfully!</h2>
            <p class="text-gray-700 text-lg mb-8">Thank you for your purchase. Your order has been confirmed and will be processed shortly.</p>
            <div class="flex flex-col sm:flex-row justify-center gap-4">
                <button class="view-order-details-btn px-8 py-4 bg-amber-500 text-white font-semibold rounded-lg hover:bg-amber-600 transition duration-300">
                    <i class="fas fa-clipboard-list mr-2"></i> View Order Details
                </button>
                <button class="continue-shopping-btn px-8 py-4 border border-gray-300 text-gray-800 font-semibold rounded-lg hover:bg-gray-100 transition duration-300">
                    <i class="fas fa-shopping-bag mr-2"></i> Continue Shopping
                </button>
            </div>
        </div>
    </div>

    <div id="order-failed-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 hidden animate-fade-in">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full text-center animate-slide-up transform scale-95 opacity-0" id="order-failed-content">
            <div class="w-32 h-32 mx-auto mb-6">
                <img src="https://cdn-icons-png.flaticon.com/512/463/463612.png" alt="Failure Cross" class="w-20 h-20 mx-auto mb-6">
            </div>
            <h2 class="text-3xl font-bold text-red-600 mb-4">Payment Failed</h2>
            <p class="text-gray-700 text-lg mb-8">Oops! Something went wrong while processing your payment. Please try again or use a different method.</p>
            <div class="flex flex-col sm:flex-row justify-center gap-4">
                <button onclick="retryOrder()" class="retry-payment-btn px-8 py-4 bg-red-500 text-white font-semibold rounded-lg hover:bg-red-600 transition duration-300">
                    <i class="fas fa-redo mr-2"></i> Retry
                </button>
                <button onclick="closeModal(document.getElementById('order-failed-modal'), document.getElementById('order-failed-content'))" class="cancel-btn px-8 py-4 border border-gray-300 text-gray-800 font-semibold rounded-lg hover:bg-gray-100 transition duration-300">
                    <i class="fas fa-times-circle mr-2"></i> Cancel
                </button>
            </div>
        </div>
    </div>

    <%- include("../../views/partials/user/footer") %>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const placeOrderBtn = document.querySelector('.place-order-btn');
            const orderConfirmModal = document.getElementById('order-confirm-modal');
            const orderSuccessfulModal = document.getElementById('order-successful-modal');
            const orderSuccessfulContent = document.getElementById('order-successful-content');
            const confirmPlaceBtn = document.querySelector('#confirm-place-order-btn');
            const cancelConfirmBtn = document.querySelector('#cancel-confirmation-btn');
            const viewOrderDetailsBtn = document.querySelector('.view-order-details-btn');
            const continueShoppingBtn = document.querySelector('.continue-shopping-btn');
            const addAddressModal = document.getElementById('add-address-modal');
            const addAddressContent = document.getElementById('add-address-content');
            const addNewAddressBtn = document.querySelector('.add-new-address-btn');
            const addAddressForm = document.getElementById('add-address-form');
            const editAddressModal = document.getElementById('edit-address-modal');
            const editAddressContent = document.getElementById('edit-address-content');
            const editAddressForm = document.getElementById('edit-address-form');
            const editAddressIdInput = document.getElementById('edit-address-id');
            const editStreetInput = document.getElementById('edit-street');
            const editLocalityInput = document.getElementById('edit-country');
            const editCityInput = document.getElementById('edit-city');
            const editStateInput = document.getElementById('edit-state');
            const editPincodeInput = document.getElementById('edit-pincode');
            const editPhoneInput = document.getElementById('edit-phone');
            const couponCodeInput = document.getElementById('coupon-code-input');
            const applyCouponBtn = document.getElementById('apply-coupon-btn');
            const couponMessage = document.getElementById('coupon-message');
            const walletButton= document.getElementById('wallet-btn');

            // Initialize selectedAddressId from backend
            window.selectedAddressId = '<%= selectedAddressId || "" %>';

            let selectedPaymentMethod = null;
            let appliedCoupon = <%= appliedCouponCode ? `{ couponCode: "${appliedCouponCode}", discountPrice: ${appliedDiscountPrice} }` : 'null' %>;

            // --- Address Selection Logic ---
            document.querySelectorAll('.address-card').forEach(card => {
                card.addEventListener('click', async (event) => {
                    if (event.target.closest('.edit-address-btn')) return; // Ignore clicks on edit button
                    const addressId = card.dataset.id;
                    try {
                        const response = await fetch('/select-address', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ addressId })
                        });
                        const data = await response.json();
                        if (data.success) {
                            window.selectedAddressId = addressId;
                            document.querySelectorAll('.address-card').forEach(c => {
                                c.classList.remove('selected');
                                c.querySelector('.fa-check-circle').classList.add('hidden');
                            });
                            card.classList.add('selected');
                            card.querySelector('.fa-check-circle').classList.remove('hidden');
                        } else {
                            Swal.fire('Error', data.message || 'Failed to select address', 'error');
                        }
                    } catch (error) {
                        console.error('Error selecting address:', error);
                        Swal.fire('Error', 'An error occurred while selecting the address.', 'error');
                    }
                });
            });

            // --- Coupon Selection Logic ---
            document.querySelectorAll('.coupon-card').forEach(card => {
                card.addEventListener('click', (event) => {
                    if (!event.target.closest('.apply-coupon-btn')) {
                        applyCoupon(card.dataset.couponCode, parseFloat(card.dataset.discountPrice));
                    }
                });
            });

            document.querySelectorAll('.apply-coupon-btn').forEach(btn => {
                btn.addEventListener('click', (event) => {
                    event.stopPropagation();
                    applyCoupon(btn.dataset.couponCode, parseFloat(btn.dataset.discountPrice));
                });
            });

            // --- Apply Coupon Function ---
            async function applyCoupon(couponCode, discountPrice) {
                const subtotal = parseFloat(document.getElementById('subtotal').dataset.value);
                try {
                    const response = await fetch('/apply-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponCode, subtotal })
                    });
                    const data = await response.json();
                    if (data.success) {
                        appliedCoupon = { couponCode, discountPrice: data.discountPrice };
                        updatePaymentSummary();
                        document.querySelectorAll('.coupon-card').forEach(c => {
                            c.classList.remove('selected');
                            c.querySelector('.fa-check-circle').classList.add('hidden');
                        });
                        const selectedCard = document.querySelector(`.coupon-card[data-coupon-code="${couponCode}"]`);
                        if (selectedCard) {
                            selectedCard.classList.add('selected');
                            selectedCard.querySelector('.fa-check-circle').classList.remove('hidden');
                        }
                        couponMessage.textContent = `Coupon "${couponCode}" applied successfully!`;
                        couponMessage.classList.remove('hidden', 'text-red-600');
                        couponMessage.classList.add('text-green-600');
                        couponCodeInput.value = couponCode;
                    } else {
                        couponMessage.textContent = data.message || 'Invalid coupon code.';
                        couponMessage.classList.remove('hidden', 'text-green-600');
                        couponMessage.classList.add('text-red-600');
                    }
                } catch (error) {
                    couponMessage.textContent = 'Error applying coupon. Please try again.';
                    couponMessage.classList.remove('hidden', 'text-green-600');
                    couponMessage.classList.add('text-red-600');
                }
            }

            // --- Manual Coupon Input ---
            applyCouponBtn.addEventListener('click', async () => {
                const couponCode = couponCodeInput.value.trim();
                if (!couponCode) {
                    couponMessage.textContent = 'Please enter a coupon code.';
                    couponMessage.classList.remove('hidden', 'text-green-600');
                    couponMessage.classList.add('text-red-600');
                    return;
                }
                const subtotal = parseFloat(document.getElementById('subtotal').dataset.value);
                try {
                    const response = await fetch('/apply-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponCode, subtotal })
                    });
                    const data = await response.json();
                    if (data.success) {
                        appliedCoupon = { couponCode, discountPrice: data.discountPrice };
                        updatePaymentSummary();
                        document.querySelectorAll('.coupon-card').forEach(c => {
                            c.classList.remove('selected');
                            c.querySelector('.fa-check-circle').classList.add('hidden');
                        });
                        const selectedCard = document.querySelector(`.coupon-card[data-coupon-code="${couponCode}"]`);
                        if (selectedCard) {
                            selectedCard.classList.add('selected');
                            selectedCard.querySelector('.fa-check-circle').classList.remove('hidden');
                        }
                        couponMessage.textContent = `Coupon "${couponCode}" applied successfully!`;
                        couponMessage.classList.remove('hidden', 'text-red-600');
                        couponMessage.classList.add('text-green-600');
                    } else {
                        couponMessage.textContent = data.message || 'Invalid coupon code.';
                        couponMessage.classList.remove('hidden', 'text-green-600');
                        couponMessage.classList.add('text-red-600');
                    }
                } catch (error) {
                    couponMessage.textContent = 'Error applying coupon. Please try again.';
                    couponMessage.classList.remove('hidden', 'text-green-600');
                    couponMessage.classList.add('text-red-600');
                }
            });


            walletButton.addEventListener('click', () => {
                window.location.href = '/wallet';
            });

            // --- Update Payment Summary ---
            function updatePaymentSummary() {
                const subtotal = parseFloat(document.getElementById('subtotal').dataset.value);
                const shipping = parseFloat(document.getElementById('shipping').dataset.value);
                const discount = appliedCoupon ? appliedCoupon.discountPrice : 0;
                const total = subtotal + shipping - discount;

                document.getElementById('subtotal').textContent = subtotal.toFixed(2);
                document.getElementById('coupon-discount-amount').textContent = discount.toFixed(2);
                document.getElementById('coupon-discount').style.display = discount > 0 ? 'flex' : 'none';
                document.getElementById('order-total').textContent = total.toFixed(2);
                document.getElementById('confirm-order-total').textContent = total.toFixed(2);
                document.getElementById('confirm-coupon-code').textContent = appliedCoupon ? appliedCoupon.couponCode : 'None';
            }

            // --- Modal Open/Close Functions ---
            const closeModal = (modalElement, contentElement) => {
                modalElement.classList.add('hidden');
                if (contentElement) {
                    contentElement.classList.remove('animate-slide-up', 'scale-100', 'opacity-100');
                    contentElement.classList.add('scale-95', 'opacity-0');
                }
            };

            const openModal = (modalElement, contentElement) => {
                modalElement.classList.remove('hidden');
                if (contentElement) {
                    setTimeout(() => {
                        contentElement.classList.remove('scale-95', 'opacity-0');
                        contentElement.classList.add('animate-slide-up', 'scale-100', 'opacity-100');
                    }, 10);
                }
            };

            // Close buttons for all modals
            document.querySelectorAll('.close-modal-btn').forEach(button => {
                button.addEventListener('click', (event) => {
                    const parentModal = event.target.closest('.fixed');
                    const parentContent = parentModal.querySelector('div:first-child');
                    closeModal(parentModal, parentContent);
                });
            });

            // --- Add New Address Functionality ---
            addNewAddressBtn.addEventListener('click', () => {
                addAddressForm.reset();
                openModal(addAddressModal, addAddressContent);
            });

            addAddressForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                const formData = new FormData(addAddressForm);
                const addressData = Object.fromEntries(formData.entries());

                const phone = addressData.phone.trim();
                const zip = addressData.zip.trim();
                const street = addressData.street.trim();
                const city = addressData.city.trim();
                const state = addressData.state.trim();
                const country = addressData.country.trim();

                const digitOnly = /^\d+$/;
                const textValid = /^[a-zA-Z0-9\s,.'-]{2,}$/;

                if (!digitOnly.test(phone) || phone.length !== 10 || /^0+$/.test(phone)) {
                    return Swal.fire("Invalid", "Phone must be 10 digits and not all zeroes.", "error");
                }

                if (!digitOnly.test(zip) || zip.length !== 6 || /^0+$/.test(zip)) {
                    return Swal.fire("Invalid", "Pincode must be 6 digits and not all zeroes.", "error");
                }

                if (!textValid.test(street) || !textValid.test(city) || !textValid.test(state) || !textValid.test(country)) {
                    return Swal.fire("Invalid", "Please enter valid address details.", "error");
                }

                try {
                    const response = await fetch('/addressAdd', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(addressData)
                    });

                    if (response.ok) {
                        Swal.fire("Success", "Address added successfully!", "success").then(() => {
                            closeModal(addAddressModal, addAddressContent);
                            window.location.reload();
                        });
                    } else {
                        const errorData = await response.json();
                        Swal.fire("Failed", errorData.message || "Unknown error", "error");
                    }
                } catch (error) {
                    console.error('Error adding address:', error);
                    Swal.fire("Error", "An error occurred while adding the address.", "error");
                }
            });

            // --- Edit Address ---
            document.querySelectorAll('.edit-address-btn').forEach(button => {
                button.addEventListener('click', (event) => {
                    event.stopPropagation();
                    const address = event.currentTarget.dataset;

                    editAddressIdInput.value = address.id;
                    editStreetInput.value = address.street;
                    editLocalityInput.value = address.country;
                    editCityInput.value = address.city;
                    editStateInput.value = address.state;
                    editPincodeInput.value = address.zip;
                    editPhoneInput.value = address.phone;

                    openModal(editAddressModal, editAddressContent);
                });
            });

            editAddressForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                const formData = new FormData(editAddressForm);
                const addressData = Object.fromEntries(formData.entries());
                const phone = addressData.phone.trim();
                const zip = addressData.zip.trim();
                const street = addressData.street.trim();
                const city = addressData.city.trim();
                const state = addressData.state.trim();
                const country = addressData.country.trim();

                const digitOnly = /^\d+$/;
                const textValid = /^[a-zA-Z0-9\s,.'-]{2,}$/;

                if (!digitOnly.test(phone) || phone.length !== 10 || /^0+$/.test(phone)) {
                    return Swal.fire("Invalid", "Phone must be 10 digits and not all zeroes.", "error");
                }

                if (!digitOnly.test(zip) || zip.length !== 6 || /^0+$/.test(zip)) {
                    return Swal.fire("Invalid", "Pincode must be 6 digits and not all zeroes.", "error");
                }

                if (!textValid.test(street) || !textValid.test(city) || !textValid.test(state) || !textValid.test(country)) {
                    return Swal.fire("Invalid", "Please enter valid address details.", "error");
                }

                try {
                    const response = await fetch('/addressEdit', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(addressData)
                    });

                    if (response.ok) {
                        Swal.fire("Success", "Address updated successfully!", "success").then(() => {
                            closeModal(editAddressModal, editAddressContent);
                            window.location.reload();
                        });
                    } else {
                        const errorData = await response.json();
                        Swal.fire("Failed", errorData.message || "Unknown error", "error");
                    }
                } catch (error) {
                    console.error('Error updating address:', error);
                    Swal.fire("Error", "An error occurred while updating the address.", "error");
                }
            });

            // --- Place Order ---
            placeOrderBtn.addEventListener('click', () => {
                if (!window.selectedAddressId) {
                    Swal.fire('Error', 'Please select a shipping address.', 'error');
                    return;
                }

                const selectedPaymentRadio = document.querySelector('input[name="payment_method"]:checked');
                if (!selectedPaymentRadio) {
                    Swal.fire('Error', 'Please select a payment method.', 'error');
                    return;
                }

                selectedPaymentMethod = selectedPaymentRadio.value;

                const paymentMethodText = {
                    'card': 'Card Payment',
                    'upi': 'UPI Payment',
                    'netbanking': 'Net Banking',
                    'cod': 'Cash on Delivery'
                }[selectedPaymentMethod] || 'Unknown Method';

                document.getElementById('confirm-payment-method').textContent = paymentMethodText;
                document.getElementById('confirm-coupon-code').textContent = appliedCoupon ? appliedCoupon.couponCode : 'None';

                openModal(orderConfirmModal, null);
            });

            confirmPlaceBtn.addEventListener('click', async () => {
                closeModal(orderConfirmModal, null);

                const orderData = {
                    addressId: window.selectedAddressId,
                    paymentMethod: selectedPaymentMethod,
                    couponCode: appliedCoupon ? appliedCoupon.couponCode : null,
                    discountPrice: appliedCoupon ? appliedCoupon.discountPrice : 0
                };

                if (selectedPaymentMethod === 'cod') {
                    try {
                        const res = await fetch('/place-order', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(orderData)
                        });

                        const data = await res.json();
                        if (data.success) {
                            window.latestOrderId = data.orderId;
                            openModal(orderSuccessfulModal, orderSuccessfulContent);
                        } else {
                            showOrderFailedModal();
                        }
                    } catch (err) {
                        console.error('Error placing order:', err);
                        Swal.fire('Error', 'An error occurred. Please try again.', 'error');
                    }
                } else {
                    try {
                        const res = await fetch('/create-order', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                paymentMethod: selectedPaymentMethod,
                                couponCode: appliedCoupon ? appliedCoupon.couponCode : null,
                                discountPrice: appliedCoupon ? appliedCoupon.discountPrice : 0
                            })
                        });

                        const { razorpayOrderId, amount, key, currency } = await res.json();

                        const options = {
                            key: key,
                            amount: amount.toString(),
                            currency: currency,
                            order_id: razorpayOrderId,
                            name: 'Perfuma',
                            description: 'Order Payment',
                            handler: async function (response) {
                                const paymentDetails = {
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpayOrderId: response.razorpay_order_id,
                                    razorpaySignature: response.razorpay_signature,
                                    addressId: window.selectedAddressId,
                                    paymentMethod: selectedPaymentMethod,
                                    couponCode: appliedCoupon ? appliedCoupon.couponCode : null,
                                    discountPrice: appliedCoupon ? appliedCoupon.discountPrice : 0
                                };

                                const placeOrderRes = await fetch('/place-order', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(paymentDetails)
                                });

                                const data = await placeOrderRes.json();
                                if (data.success) {
                                    window.latestOrderId = data.orderId;
                                    openModal(orderSuccessfulModal, orderSuccessfulContent);
                                } else {
                                    showOrderFailedModal();
                                }
                            },
                            theme: {
                                color: '#6366f1',
                                modal: {
                                    ondismiss: function () {
                                        showOrderFailedModal();
                                    }
                                }
                            }
                        };

                        const rzp = new Razorpay(options);
                        rzp.open();
                    } catch (err) {
                        console.error('Error initiating Razorpay:', err);
                        Swal.fire('Error', 'Payment initiation failed.', 'error');
                    }
                }
            });

            // Cancel Confirmation Button Click
            cancelConfirmBtn.addEventListener('click', () => {
                closeModal(orderConfirmModal, null);
            });

            viewOrderDetailsBtn.addEventListener('click', () => {
                if (window.latestOrderId) {
                    window.location.href = `/order-details/${window.latestOrderId}`;
                } else {
                    Swal.fire('Error', 'Order ID not found.', 'error');
                }
            });

            continueShoppingBtn.addEventListener('click', () => {
                window.location.href = '/shop';
            });

            function showOrderFailedModal() {
                openModal(document.getElementById('order-failed-modal'), document.getElementById('order-failed-content'));
            }

            function retryOrder() {
                closeModal(document.getElementById('order-failed-modal'), document.getElementById('order-failed-content'));
                openModal(orderConfirmModal, null);
            }

            // Update payment summary on page load
            updatePaymentSummary();
        });
    </script>
</body>
</html>